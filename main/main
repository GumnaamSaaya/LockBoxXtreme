#!/usr/bin/env python3

import sys
import os
import time
import colorama
from colorama import Fore, Style
import importlib.util
from getpass import getpass
import json
import shutil

sys.dont_write_bytecode = True

# Function to dynamically load modules without .py extension
def load_module(module_name, module_path):
    spec = importlib.util.spec_from_file_location(module_name, module_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

# Load the encryptor and storage modules
encryptor = load_module("encryptor", "encryptor")
storage = load_module("storage", "storage")

# Assign functions from the loaded modules
generate_key = encryptor.generate_key
load_key = encryptor.load_key
encrypt_message = encryptor.encrypt_message
decrypt_message = encryptor.decrypt_message
validate_password = encryptor.validate_password
save_passwords = storage.save_passwords
load_passwords = storage.load_passwords
delete_service = storage.delete_service

# Prevent the creation of __pycache__
def remove_pycache():
    if os.path.exists('__pycache__'):
        shutil.rmtree('__pycache__')

remove_pycache()

colorama.init(autoreset=True)

def clear_screen():
    """
    Clears the terminal screen based on the operating system.
    """
    os.system('cls' if os.name == 'nt' else 'clear')

def print_banner():
    banner = f"""
{Fore.CYAN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                     ‚îÇ
‚îÇ        {Fore.RED}Welcome to the LockBoxXtreme!{Fore.CYAN}         ‚îÇ
‚îÇ                                                     ‚îÇ
‚îÇ      {Fore.GREEN}Your password guardian and cringy buddy!{Fore.CYAN}   ‚îÇ
‚îÇ                                                     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
"""
    print(banner)

def print_help():
    help_text = f"""
{Fore.CYAN}LockBoxXtreme - Password Management Tool

Usage: python main.py [options]

Options:
-h, --help                Show this help message and exit
1) Store Password         Store a new password securely.
2) Retrieve Password      Retrieve a stored password.
3) View All Services      View all services with stored passwords.
4) Delete a Service       Delete a stored password for a specific service.
5) Exit                   Exit the application.

{Fore.YELLOW}Example:
python main.py            Run the interactive menu.
python main.py -h         Show help message.
"""
    print(help_text)

def main():
    """
    Main function to interact with the user and manage passwords.
    """
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print_help()
        return

    salt = None
    key = None

    try:
        with open("secret.salt", "rb") as salt_file:
            salt = salt_file.read()
    except FileNotFoundError:
        print(f"{Fore.RED}üö® Salt file not found. A new one will be created.")
        salt = os.urandom(16)
        with open("secret.salt", "wb") as salt_file:
            salt_file.write(salt)

    password = getpass(f"{Fore.CYAN}üîë Enter your master password: {Fore.YELLOW}")
    key = load_key(password, salt)

    while True:
        clear_screen()
        print_banner()
        
        print(f"{Fore.MAGENTA}üíæ Choose an option:")
        print(f"{Fore.YELLOW}1) Store Password {Fore.MAGENTA}(Keep it safe, bro!)")
        print(f"{Fore.YELLOW}2) Retrieve Password {Fore.MAGENTA}(Don't worry, I got you!)")
        print(f"{Fore.YELLOW}3) View All Services {Fore.MAGENTA}(Check what you have stored!)")
        print(f"{Fore.YELLOW}4) Delete a Service {Fore.MAGENTA}(Remove a stored password!)")
        print(f"{Fore.YELLOW}5) Exit {Fore.MAGENTA}(Bye for now!)")
        
        choice = input(f"{Fore.GREEN}üëâ {Fore.CYAN}Enter your choice: {Style.RESET_ALL}")

        if choice == "1":
            clear_screen()
            print_banner()
            service = input(f"{Fore.CYAN}üîê Enter the service name you wanna protect: {Fore.YELLOW}")
            password = getpass(f"{Fore.CYAN}üîë Enter the password you wanna save: {Fore.YELLOW}")

            if not validate_password(password):
                print(f"{Fore.RED}‚ùå Password did not meet the requirements. Please try again.")
                time.sleep(1)
                continue

            encrypted_password = encrypt_message(password, key)

            passwords = load_passwords()
            passwords[service] = encrypted_password.decode()  # Store as a string in JSON
            save_passwords(passwords)
            print(f"{Fore.GREEN}‚úÖ Password for {service} has been locked away safely! üîí")
            time.sleep(2)

        elif choice == "2":
            clear_screen()
            print_banner()
            service = input(f"{Fore.CYAN}üîç Enter the service name you wanna retrieve: {Fore.YELLOW}")

            passwords = load_passwords()
            encrypted_password = passwords.get(service)

            if encrypted_password:
                decrypted_password = decrypt_message(encrypted_password.encode(), key)
                print(f"{Fore.GREEN}üéâ Password for {service}: {Fore.YELLOW}{decrypted_password}")
            else:
                print(f"{Fore.RED}üö® No password found for the given service! Try again, buddy.")
            time.sleep(1)

        elif choice == "3":
            clear_screen()
            print_banner()
            passwords = load_passwords()
            if passwords:
                print(f"{Fore.CYAN}üîç Saved services:")
                for service in passwords:
                    print(f"{Fore.YELLOW} - {service}")
            else:
                print(f"{Fore.RED}üö® No services saved yet.")
            print()  # Adding space for better readability
            time.sleep(1)

        elif choice == "4":
            clear_screen()
            print_banner()
            service = input(f"{Fore.CYAN}üóëÔ∏è Enter the service name you wanna delete: {Fore.YELLOW}")
            delete_service(service)
            time.sleep(1)

        elif choice == "5":
            clear_screen()
            print(f"{Fore.GREEN}üëã Exiting. Stay safe!")
            break

        else:
            clear_screen()
            print_banner()
            print(f"{Fore.RED}‚ùå Invalid option selected. Are you even trying?")
            time.sleep(1)

if __name__ == "__main__":
    main()

    # Ensure __pycache__ is removed at the end of the script
    remove_pycache()
